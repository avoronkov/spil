// Code generated by go-bindata.
// sources:
// library/builtin/list.lisp
// library/builtin/numbers.lisp
// library/builtin/order.lisp
// library/std/builtin.lisp
// library/std/numeric.lisp
// library/std/string.lisp
// DO NOT EDIT!

package library

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _libraryBuiltinListLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8d\xc1\x0a\xc2\x30\x10\x44\xef\xf9\x8a\x39\x26\x17\x3f\x20\x7e\x8a\x78\x18\xdb\x54\x03\xcb\x5a\xda\x45\xda\xbf\x17\xb7\xa5\x56\x10\xf1\x36\xec\xbc\x79\x1b\x9b\xbb\xda\xc0\xc6\x90\x99\x42\x88\x6d\xe9\x70\x2b\x6c\x11\x25\x4b\x1d\xed\xc4\x73\x42\x26\xa2\xd2\xea\xa3\x1c\xbc\x93\xe4\x34\x16\xdc\x58\xe5\x13\x5f\xd3\x36\x72\x42\xde\x45\x0a\xe1\x08\xdf\xb2\xef\x8b\xee\x9f\x61\xca\xfc\x62\x58\x39\xc1\xf4\xaf\xe5\xb2\x81\x3a\xff\xf4\xe8\xbc\x33\x75\xaf\x1b\x38\x5c\xc7\xa5\xf6\x98\xc2\x33\x00\x00\xff\xff\xa3\xe0\x51\xa8\x26\x01\x00\x00")

func libraryBuiltinListLispBytes() ([]byte, error) {
	return bindataRead(
		_libraryBuiltinListLisp,
		"library/builtin/list.lisp",
	)
}

func libraryBuiltinListLisp() (*asset, error) {
	bytes, err := libraryBuiltinListLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "library/builtin/list.lisp", size: 294, mode: os.FileMode(436), modTime: time.Unix(1591971849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _libraryBuiltinNumbersLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x56\xc8\xcc\x2b\x51\xc8\x2f\x48\x2d\x4a\x2c\xc9\xcc\xcf\x2b\xe6\xd2\x48\x49\x4d\x53\xd0\x56\xd0\x48\x2c\x4a\x2f\xb6\x02\x11\xd1\x99\x79\x25\xb1\x9a\x0a\x56\x20\x75\x1a\x89\x05\x05\x39\x95\x20\x2d\x7a\x05\x39\xa5\xc5\x0a\x20\x79\x88\x94\x26\x44\xa3\x2e\x61\x8d\xb9\x99\x79\xd8\x74\x6a\x11\xa1\xb3\x34\xa7\x04\x53\xa3\x3e\x61\x8d\x29\x99\x65\x28\xfa\xb8\xac\x15\xd2\x72\xf2\x13\x09\xf8\x1b\xac\x04\x64\x1a\x44\x2d\xd4\x3c\x30\x07\xc5\xf7\x60\x11\x6c\xfe\xc7\x67\x00\x4a\x28\x20\x9b\xa0\x45\xb4\x09\x48\xa1\x81\x6c\x80\x3e\xb1\x06\x20\x85\x0a\x54\x3f\x20\x00\x00\xff\xff\xd3\x05\xef\xd5\x0d\x02\x00\x00")

func libraryBuiltinNumbersLispBytes() ([]byte, error) {
	return bindataRead(
		_libraryBuiltinNumbersLisp,
		"library/builtin/numbers.lisp",
	)
}

func libraryBuiltinNumbersLisp() (*asset, error) {
	bytes, err := libraryBuiltinNumbersLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "library/builtin/numbers.lisp", size: 525, mode: os.FileMode(436), modTime: time.Unix(1591971849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _libraryBuiltinOrderLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\x48\x49\x4d\x53\xb0\x51\xd0\x48\xb4\xca\xcc\x2b\x51\x48\x02\x91\x9a\x0a\x56\x49\xf9\xf9\x39\x0a\x1a\x79\x89\x25\x99\x65\xa9\x7a\x99\x79\x25\x7a\x39\xa9\xc5\xc5\x0a\x89\x0a\x49\x9a\x9a\x5c\x60\x1d\x76\xc4\xe9\x48\x52\x48\x84\xe9\xb0\xb1\xc5\xa1\x25\xbf\x04\x87\x3e\x98\x55\xa4\x68\x04\x3b\x51\x93\x8b\x0b\xe1\xad\xe2\x92\x22\x85\x24\x10\x89\xee\xc8\xe2\x92\x22\xec\xde\x22\xac\x03\xc3\x5b\x58\xb4\x20\xb9\x0e\x55\x1f\x8a\xb7\x88\xd4\x08\xf5\x16\x20\x00\x00\xff\xff\xf7\x05\x87\x2b\xad\x01\x00\x00")

func libraryBuiltinOrderLispBytes() ([]byte, error) {
	return bindataRead(
		_libraryBuiltinOrderLisp,
		"library/builtin/order.lisp",
	)
}

func libraryBuiltinOrderLisp() (*asset, error) {
	bytes, err := libraryBuiltinOrderLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "library/builtin/order.lisp", size: 429, mode: os.FileMode(436), modTime: time.Unix(1591971849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _libraryStdBuiltinLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6e\xdc\x3c\x0c\x5d\xdb\xa7\xe0\x97\xcd\x48\xf8\x9a\x20\x69\x77\x63\x64\xd9\x53\x04\x41\xa1\xd8\x72\x2c\x54\x96\x0d\x89\x93\x62\x7a\xfa\x82\x94\x64\xcb\xf3\xd3\xb4\xdd\x14\xcd\x22\x90\xc4\x47\x99\x7c\x7c\xa4\xa6\x69\x20\xa0\x72\x9d\xf2\x1d\x58\x13\x66\xe8\x0f\xae\x45\x33\xb9\x50\xd7\x4d\x03\x56\x7d\x3f\x42\x6f\x2c\x6a\x5f\x8b\x4e\xf7\x69\x0d\x62\xf6\xba\xdb\x13\xf6\x49\x7d\x78\x99\x26\xfb\x0c\x36\xe0\xde\x9a\x80\x4f\xea\x59\x42\x5e\xd5\x15\x88\xa0\xb1\xae\x00\xd8\x95\x17\xc2\xaa\xf1\xa5\x53\x75\x55\x81\x30\x3d\x08\x3d\xce\x78\x84\x2f\x0f\x92\x4e\x00\x76\x22\x2d\xd8\x48\x1f\x02\x31\x68\xd5\x11\x82\x2c\x15\x08\xba\x7d\x3d\x04\x81\xca\xd8\xc2\x1c\xb4\xed\x8b\x43\xfa\xa3\x40\x5e\xb5\xe3\x20\x28\xd4\x35\x44\x59\x97\x99\xed\xfe\xd9\xd4\x76\x97\x73\x5b\xaa\x38\xaa\x39\x26\x3a\xaa\x19\x44\xef\x38\xc5\x25\xb5\xe4\x53\x26\x65\xa8\xe8\xbf\x95\x54\x8c\xbd\x77\x45\x52\xdb\x58\x73\x15\xe8\x6a\x8e\x34\x93\x3f\xaa\x79\xf7\x97\x83\xda\x6d\xa2\x6a\x1a\x40\xf5\x55\x43\x6f\x7c\x40\x70\xf0\xa6\xec\x41\x07\xe8\xfd\x34\x02\xc7\xc4\x61\x33\x44\xb8\xbd\x71\xf8\xbe\x48\x2e\x86\xde\x4d\x29\xcc\xa0\x11\x5a\xb7\x95\xc3\x72\x6e\xd3\x79\x11\x77\xa1\xa3\xc9\x83\x78\x24\xe7\x7b\x99\x79\x68\x6d\x12\x4c\xe4\x61\xab\xab\xd6\xca\xbc\xbf\x25\xb7\x45\x66\xe4\x75\x5e\xa7\x08\x75\x91\x99\x52\x5a\x0d\x94\x24\x44\xe5\x09\xde\xf1\x86\xbe\x2d\xe5\x16\x75\xcf\x06\xd5\xb6\x92\xff\x5d\xb8\x22\x1a\xe3\x35\xe2\x16\x8a\xe8\xe2\xfd\x6a\x9e\xb5\xeb\x08\x95\xb2\xe1\xb0\x64\x52\x3a\xbb\x69\xab\x47\xed\xb0\xa8\x16\x7c\x1b\x8c\xd5\xd0\x4e\xae\x33\x34\xdc\xc0\x04\x40\x7f\xd0\x6b\x15\x6f\x23\x62\x6d\xfe\x3f\x12\x21\x55\x62\x11\x22\x08\x37\xe1\x59\x97\xcb\x2b\x02\xbd\xd0\xf1\x57\x1a\x86\xf2\xec\xfc\x34\xbf\xa3\x4d\x86\x10\xe1\x65\x16\x60\x65\x69\x4d\xca\xdd\x20\x44\x34\x6d\xa9\x97\xa9\x27\xd8\xb6\xf0\xfb\x53\x56\x09\xfa\x2b\xac\x36\x64\xa6\x30\x6e\xf0\x38\x6b\x96\xc0\x23\xdc\x80\xc8\x3b\x26\xe1\x04\x94\x0b\x5f\x20\x4b\x31\xd4\xa9\x1c\xa7\xfc\x2f\x56\xa0\x65\xac\x60\x11\x66\x44\x2e\x5a\xdb\x8a\xca\xe1\x90\x13\x5f\x99\xbe\x23\xf3\xe7\x4c\x87\x3b\x8c\xda\xab\xcc\x44\x40\xe5\x51\x77\x11\xfc\x00\xe2\x3f\x79\x97\xe5\x4e\x77\x9d\x4c\x0d\x09\x7b\xe5\x8e\xb9\xcd\x37\x25\x48\x51\x5f\xf3\x8c\xf3\x46\x81\x70\x0a\xcd\x9b\xbe\x23\x48\x6a\xc6\xbd\xa2\x0c\xd2\xeb\x46\x5a\x01\x71\xee\x85\x03\x3c\x24\x9e\x19\x19\x34\x15\xf4\x0a\xf2\x63\x89\xc4\xc1\xf8\xee\xda\x9d\x9f\x4a\xb9\x7a\xdd\x1d\xda\xa4\x8b\xb8\x5e\x87\xfd\x4e\xf0\x2c\xa0\xf4\x13\x09\x3c\x19\x2e\x62\xf3\x97\x4e\x1c\x44\xc2\xd1\x90\x2f\x46\xc5\x32\xf3\x79\x4b\xb7\xca\xf2\x41\x6c\x27\xd7\xaa\xd4\x2c\x71\xcd\x35\x0d\x85\x32\xbd\xc6\x83\x77\x30\xb9\x65\xa8\x80\x42\xc0\x41\x03\x9a\x51\xa7\x91\x90\xc6\x41\x55\x8e\x83\x8a\x0d\x03\x88\xc8\x7b\x7e\xbf\xf9\x14\xc9\x8b\x39\x5e\x8e\xd7\x07\x6c\x88\xe3\xba\x7c\xd3\x90\x8f\xaa\x34\xc9\xab\xf4\x13\xa0\x98\x1a\x98\xdb\x14\xd3\x78\xa9\xb6\x53\x65\x58\xc6\x3d\xa3\x06\x19\x81\x97\xa6\x7c\xe2\x8b\x68\x58\x7a\x9f\x37\x2b\x75\xda\xbd\xe2\x10\x59\x8b\xeb\x55\x00\x12\x58\x99\x59\x89\xc9\x1c\x75\x90\xa4\x7f\xcd\x65\xc5\xc2\xfd\x39\x3a\x6b\xc4\xb8\xec\x50\xbe\x1e\xa7\x77\x9e\x40\xf3\xdd\xa5\x34\xfe\xe7\x07\x84\xdf\xd1\x1f\x01\x00\x00\xff\xff\x20\x86\xe0\x92\x02\x0b\x00\x00")

func libraryStdBuiltinLispBytes() ([]byte, error) {
	return bindataRead(
		_libraryStdBuiltinLisp,
		"library/std/builtin.lisp",
	)
}

func libraryStdBuiltinLisp() (*asset, error) {
	bytes, err := libraryStdBuiltinLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "library/std/builtin.lisp", size: 2818, mode: os.FileMode(436), modTime: time.Unix(1591971849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _libraryStdNumericLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x56\xd0\x56\x30\xe4\xd2\x48\x49\x4d\x53\xc8\xcc\x4b\x56\xd0\xc8\xb3\xca\xcc\x2b\xd1\x54\x00\x91\x0a\x1a\xda\x0a\x79\x0a\x86\x9a\x9a\x5c\x5c\xd6\x0a\xba\x30\x55\x29\xa9\xe8\xaa\x74\xa1\xaa\x00\x01\x00\x00\xff\xff\xc4\xc9\x6b\x92\x4b\x00\x00\x00")

func libraryStdNumericLispBytes() ([]byte, error) {
	return bindataRead(
		_libraryStdNumericLisp,
		"library/std/numeric.lisp",
	)
}

func libraryStdNumericLisp() (*asset, error) {
	bytes, err := libraryStdNumericLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "library/std/numeric.lisp", size: 75, mode: os.FileMode(436), modTime: time.Unix(1591971849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _libraryStdStringLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xcb\x6e\xc3\x20\x10\x45\xd7\xe6\x2b\xae\xb2\x31\xb3\xc8\xa2\x5b\x47\xfd\x92\xb6\xaa\x28\xc6\x29\x12\x02\x64\xa6\xea\xe3\xeb\x2b\x26\x4e\x65\xa7\xce\x6b\x83\xb1\xe6\xe8\xcc\x5c\x66\xb7\x43\xc9\xc1\x33\x0a\x8f\x3e\xee\xe1\x23\x27\x7c\xa6\xb1\x2f\x4a\xf7\x6e\x40\x74\x5f\xbc\x9d\x6a\xba\xb8\xdc\x0d\x1f\xd1\x56\xb8\x2b\x3c\x12\xba\xe0\x0b\x43\xcf\xa9\xe2\x72\xad\x63\xb3\x21\xba\xe4\x68\x35\x55\x66\x52\xb4\xfa\x3a\x6d\xac\x5d\x74\x95\xd3\x58\x7b\xb5\xd5\x34\xee\x89\x40\x35\x15\x61\xf8\xb2\xad\x33\x6b\x39\xde\x9d\xe9\x2b\x4f\x84\xee\x2d\xa5\x40\x47\x8a\x03\x74\x9f\xa0\xd9\xf8\x80\x83\x44\xb0\x5a\xf7\xc3\x24\x51\x0d\x20\xbf\xfa\xf1\x38\x98\x6a\x9a\xff\xef\xc3\xa1\x96\x0f\xb5\xbf\x14\x1c\xc4\x86\x55\x5c\x7a\x9b\x9c\x5d\xec\x05\x5e\x0c\x2a\x1f\x22\xa5\xd4\xea\x3a\x83\xf9\xf9\x86\xb4\x49\xc3\x7c\xb7\x72\x85\x5e\x2e\xf3\xa9\xf0\xf8\x02\xe8\xbd\x8b\xc0\xf3\x72\x94\x6c\xac\xc3\xeb\x03\xe1\x04\xa7\x99\xaf\x5d\x17\x56\x5f\x7b\xbb\xef\x86\x20\xc1\x47\x37\x05\x91\xeb\x1d\x41\x5c\x0a\x17\x62\x88\xed\x8e\x18\x67\x6d\xbf\x01\x00\x00\xff\xff\xad\x4e\xe2\x32\x5c\x03\x00\x00")

func libraryStdStringLispBytes() ([]byte, error) {
	return bindataRead(
		_libraryStdStringLisp,
		"library/std/string.lisp",
	)
}

func libraryStdStringLisp() (*asset, error) {
	bytes, err := libraryStdStringLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "library/std/string.lisp", size: 860, mode: os.FileMode(436), modTime: time.Unix(1591971849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"library/builtin/list.lisp": libraryBuiltinListLisp,
	"library/builtin/numbers.lisp": libraryBuiltinNumbersLisp,
	"library/builtin/order.lisp": libraryBuiltinOrderLisp,
	"library/std/builtin.lisp": libraryStdBuiltinLisp,
	"library/std/numeric.lisp": libraryStdNumericLisp,
	"library/std/string.lisp": libraryStdStringLisp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"library": &bintree{nil, map[string]*bintree{
		"builtin": &bintree{nil, map[string]*bintree{
			"list.lisp": &bintree{libraryBuiltinListLisp, map[string]*bintree{}},
			"numbers.lisp": &bintree{libraryBuiltinNumbersLisp, map[string]*bintree{}},
			"order.lisp": &bintree{libraryBuiltinOrderLisp, map[string]*bintree{}},
		}},
		"std": &bintree{nil, map[string]*bintree{
			"builtin.lisp": &bintree{libraryStdBuiltinLisp, map[string]*bintree{}},
			"numeric.lisp": &bintree{libraryStdNumericLisp, map[string]*bintree{}},
			"string.lisp": &bintree{libraryStdStringLisp, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

